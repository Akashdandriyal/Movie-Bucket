{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","height","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","event","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4RAWeA,EARA,SAACC,GACZ,OACI,4BAAQC,UAAY,cAChB,4BAAI,kBAAC,IAAD,MAAJ,IAAsBD,EAAME,QCezBC,EAnBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAENC,EAA2B,QAAjBD,EAAME,OADY,qGACmCF,EAAME,OAC3E,OACI,yBAAKL,UAAY,SACb,4BAAKG,EAAMG,OACX,6BACI,yBACIC,MAAQ,MACRC,OAAS,MACTC,IAAG,4BAAyBN,EAAMG,OAClCI,IAAON,KAGf,2BAAID,EAAMQ,QCiBPC,EA/BA,SAACb,GAAW,IAAD,EAEgBc,mBAAS,IAFzB,mBAEfC,EAFe,KAEFC,EAFE,KAatB,OACI,0BAAMf,UAAY,UACd,2BACIA,UAAY,eACZgB,MAASF,EACTG,SAdqB,SAACC,GAC9BH,EAAeG,EAAMC,OAAOH,QAcpBI,KAAO,SAEX,2BACIpB,UAAY,eACZqB,QAfe,SAACH,GACxBA,EAAMI,iBACNvB,EAAMwB,OAAOT,GACbC,EAAe,KAaPK,KAAO,SACPJ,MAAQ,aCjBlBQ,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAIVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOV,MACb,IAAK,wBACH,OAAO,2BACFS,GADL,IAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBACH,OAAO,2BACFE,GADL,IAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IAkEEI,EA5DH,WAAO,IAAD,EACUC,qBAAWN,EAASJ,GAD9B,mBACTK,EADS,KACFM,EADE,KAGdC,qBAAU,WAENC,MA1Cc,kDA2CTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAENN,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,cAGhC,IAEF,IAsBQc,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACA,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,iBACb,kBAAC,EAAD,CAAQsB,OA3BK,SAAAT,GACdqB,EAAS,CACPf,KAAM,0BAGLiB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACLwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,SACfP,EAAS,CACJf,KAAM,wBACNW,QAASU,EAAa7B,SAG3BuB,EAAS,CACJf,KAAM,wBACNY,MAAOS,EAAaE,cAY9B,uBAAG3C,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZyB,IAAYE,EACX,6CACEA,EACF,yBAAK3B,UAAU,gBAAgB2B,GAE/BD,EAAOkB,KAAI,SAACzC,EAAO0C,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc1C,EAAMG,OAASH,MAAOA,UCpFtC4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.fabd9074.chunk.js","sourcesContent":["import React from 'react'\nimport TheatersIcon from '@material-ui/icons/Theaters';\n\nconst Header = (props) => {\n    return (\n        <header className = \"App-header\">\n            <h2><TheatersIcon /> {props.text}</h2>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react'\n\nconst Movie = ({movie}) => {\n    const DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n    const poster = (movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster);\n    return (\n        <div className = \"movie\">\n            <h2>{movie.Title}</h2>\n            <div>\n                <img\n                    width = \"200\"\n                    height = \"300\"\n                    alt = {`The movie titled: ${movie.Title}`}\n                    src = {poster}\n                />\n            </div>\n            <p>{movie.Year}</p>\n        </div>\n    );\n};\n\nexport default Movie;\n","import React, { useState } from 'react'\n\nconst Search = (props) => {\n\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const handleSearchInputChanges = (event) =>{\n        setSearchValue(event.target.value);\n    };\n\n    const callSearchFunction = (event) => {\n        event.preventDefault();\n        props.search(searchValue);\n        setSearchValue(\"\");\n    }\n    return (\n        <form className = \"search\">\n            <input \n                className = \"form-control\"\n                value = {searchValue}\n                onChange = {handleSearchInputChanges}\n                type = \"text\"\n            />\n            <input \n                className = \"btn btn-dark\"\n                onClick = {callSearchFunction}\n                type = \"submit\"\n                value = \"SEARCH\"\n            />\n        </form>\n    )\n}\n\nexport default Search;\n","import React, { useReducer, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\n\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n    \n        fetch(MOVIE_API_URL)\n            .then(response => response.json())\n            .then(jsonResponse => {\n        \n            dispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n        \t});\n      \t});\n  \t}, []);\n\n    const search = searchValue => {\n    \tdispatch({\n      \ttype: \"SEARCH_MOVIES_REQUEST\"\n    \t});\n\t\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      \t.then(response => response.json())\n      \t.then(jsonResponse => {\n        \tif (jsonResponse.Response === \"True\") {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_SUCCESS\",\n                payload: jsonResponse.Search\n          \t});\n        \t} else {\n          \tdispatch({\n                type: \"SEARCH_MOVIES_FAILURE\",\n                error: jsonResponse.Error\n          \t});\n          }\n      \t});\n\t  };\n\n    const { movies, errorMessage, loading } = state;\n\n    return (\n    <div className=\"App\">\n      <Header text=\"MOVIE BUCKET\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}